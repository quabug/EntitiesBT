using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using EntitiesBT.Variable;
using Unity.Entities;
using UnityEditor;

namespace EntitiesBT.Editor
{
    public interface INodeDataFieldCodeGenerator
    {
        bool ShouldGenerate(FieldInfo fi);
        string GenerateField(FieldInfo fi);
        string GenerateBuild(FieldInfo fi);
    }

    public class DefaultNodeDataFieldCodeGenerator : INodeDataFieldCodeGenerator
    {
        public bool ShouldGenerate(FieldInfo fi)
        {
            return true;
        }

        public string GenerateField(FieldInfo fi)
        {
            return $"public {fi.FieldType.FullName} {fi.Name};";
        }

        public string GenerateBuild(FieldInfo fi)
        {
            return $"data.{fi.Name} = {fi.Name};";
        }
    }

    public class BlobArrayFieldCodeGenerator : INodeDataFieldCodeGenerator
    {
        public bool ShouldGenerate(FieldInfo fi)
        {
            return fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(BlobArray<>);
        }

        public string GenerateField(FieldInfo fi)
        {
            return $"public {fi.FieldType.GenericTypeArguments[0].FullName}[] {fi.Name};";
        }

        public string GenerateBuild(FieldInfo fi)
        {
            return $"builder.AllocateArray(ref data.{fi.Name}, {fi.Name});";
        }
    }

    public class BlobStringFieldCodeGenerator : INodeDataFieldCodeGenerator
    {
        public bool ShouldGenerate(FieldInfo fi)
        {
            return fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(BlobString);
        }

        public string GenerateField(FieldInfo fi)
        {
            return $"public string {fi.Name};";
        }

        public string GenerateBuild(FieldInfo fi)
        {
            return $"builder.AllocateString(ref data.{fi.Name}, {fi.Name});";
        }
    }

    [Serializable]
    public class BlobVariableFieldCodeGenerator : INodeDataFieldCodeGenerator
    {
        public bool ShouldGenerateVariableInterface = true;
        public string VariableInterfaceDirectory = "Variable";
        public string VariableInterfaceNamespace = "EntitiesBT.Variable";
        public string VariablePropertyNameSuffix = "Property";
        public NodeComponentsGenerator Generator;
        private const string _HEAD_LINE = "// Automatically generated by `BlobVariableFieldCodeGenerator`";

        public bool ShouldGenerate(FieldInfo fi)
        {
            return fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(BlobVariable<>);
        }

        public string GenerateField(FieldInfo fi)
        {
            var variableType = fi.FieldType.GetGenericArguments()[0];
            if (ShouldGenerateVariableInterface) GenerateVariableInterface();
            var stringBuilder = new StringBuilder();
            stringBuilder.Append("[UnityEngine.SerializeReference, SerializeReferenceButton]");
            stringBuilder.Append(" ");
            stringBuilder.AppendLine($"public {VariableInterfaceNamespace}.{variableType.Name}{VariablePropertyNameSuffix} {fi.Name};");
            return stringBuilder.ToString();

            void GenerateVariableInterface()
            {
                var directory = Path.GetDirectoryName(AssetDatabase.GetAssetPath(Generator)) + "/" + VariableInterfaceDirectory;
                if (!Directory.Exists(directory)) Directory.CreateDirectory(directory);

                var filepath = $"{directory}/{variableType.Name}{VariablePropertyNameSuffix}.cs";
                if (!File.Exists(filepath) || File.ReadLines(filepath).FirstOrDefault() == _HEAD_LINE)
                {
                    using (var writer = new StreamWriter(filepath))
                    {
                        writer.WriteLine(_HEAD_LINE);
                        writer.WriteLine(VariableGenerator.NamespaceBegin(VariableInterfaceNamespace));
                        writer.WriteLine(VariableGenerator.CreateInterface(variableType, VariablePropertyNameSuffix));
                        writer.WriteLine(VariableGenerator.CreateClass(variableType, typeof(CustomVariableProperty<>), VariablePropertyNameSuffix));
                        writer.WriteLine(VariableGenerator.CreateClass(variableType, typeof(ComponentVariableProperty<>), VariablePropertyNameSuffix));
                        writer.WriteLine(VariableGenerator.CreateClass(variableType, typeof(NodeVariableProperty<>), VariablePropertyNameSuffix));
                        writer.WriteLine(VariableGenerator.NamespaceEnd());
                    }
                }
            }
        }

        public string GenerateBuild(FieldInfo fi)
        {
            return $"{fi.Name}.Allocate(ref builder, ref data.{fi.Name}, Self, tree);";
        }
    }

    [Serializable]
    public class BlobVariableFieldCodeGeneratorForOdin : INodeDataFieldCodeGenerator
    {
        public bool ShouldGenerate(FieldInfo fi)
        {
            return fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(BlobVariable<>);
        }

        public string GenerateField(FieldInfo fi)
        {
            var variableType = fi.FieldType.GetGenericArguments()[0];
            var stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("");
            stringBuilder.AppendLine("#if ODIN_INSPECTOR");
            stringBuilder.Append("        ");
            stringBuilder.AppendLine("[Sirenix.Serialization.OdinSerialize, System.NonSerialized]");
            stringBuilder.Append("        ");
            stringBuilder.AppendLine($"public EntitiesBT.Variable.VariableProperty<{variableType.FullName}> {fi.Name};");
            stringBuilder.AppendLine("#endif");
            return stringBuilder.ToString();
        }

        public string GenerateBuild(FieldInfo fi)
        {
            var stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("");
            stringBuilder.AppendLine("#if ODIN_INSPECTOR");
            stringBuilder.Append("            ");
            stringBuilder.AppendLine($"{fi.Name}.Allocate(ref builder, ref data.{fi.Name}, Self, tree);");
            stringBuilder.AppendLine("#endif");
            return stringBuilder.ToString();
        }
    }
}
